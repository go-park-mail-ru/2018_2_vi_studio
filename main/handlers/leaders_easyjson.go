// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package handlers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	proto "main/proto"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson39e7a5b4DecodeMainHandlers(in *jlexer.Lexer, out *LeadersHandler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39e7a5b4EncodeMainHandlers(out *jwriter.Writer, in LeadersHandler) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LeadersHandler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39e7a5b4EncodeMainHandlers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LeadersHandler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39e7a5b4EncodeMainHandlers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LeadersHandler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39e7a5b4DecodeMainHandlers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LeadersHandler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39e7a5b4DecodeMainHandlers(l, v)
}
func easyjson39e7a5b4DecodeMainHandlers1(in *jlexer.Lexer, out *GetLeadersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "leaders":
			if in.IsNull() {
				in.Skip()
				out.Leaders = nil
			} else {
				in.Delim('[')
				if out.Leaders == nil {
					if !in.IsDelim(']') {
						out.Leaders = make([]*proto.User, 0, 8)
					} else {
						out.Leaders = []*proto.User{}
					}
				} else {
					out.Leaders = (out.Leaders)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *proto.User
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(proto.User)
						}
						easyjson39e7a5b4DecodeMainProto(in, &*v1)
					}
					out.Leaders = append(out.Leaders, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pageCount":
			out.PageCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39e7a5b4EncodeMainHandlers1(out *jwriter.Writer, in GetLeadersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"leaders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Leaders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Leaders {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson39e7a5b4EncodeMainProto(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pageCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PageCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetLeadersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39e7a5b4EncodeMainHandlers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetLeadersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39e7a5b4EncodeMainHandlers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetLeadersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39e7a5b4DecodeMainHandlers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetLeadersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39e7a5b4DecodeMainHandlers1(l, v)
}
func easyjson39e7a5b4DecodeMainProto(in *jlexer.Lexer, out *proto.User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			if in.IsNull() {
				in.Skip()
				out.Uid = nil
			} else {
				if out.Uid == nil {
					out.Uid = new(proto.UUID)
				}
				easyjson39e7a5b4DecodeMainProto1(in, &*out.Uid)
			}
		case "nickname":
			out.Nickname = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "points":
			out.Points = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39e7a5b4EncodeMainProto(out *jwriter.Writer, in proto.User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Uid != nil {
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson39e7a5b4EncodeMainProto1(out, *in.Uid)
	}
	if in.Nickname != "" {
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	if in.Points != 0 {
		const prefix string = ",\"points\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Points))
	}
	out.RawByte('}')
}
func easyjson39e7a5b4DecodeMainProto1(in *jlexer.Lexer, out *proto.UUID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39e7a5b4EncodeMainProto1(out *jwriter.Writer, in proto.UUID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
